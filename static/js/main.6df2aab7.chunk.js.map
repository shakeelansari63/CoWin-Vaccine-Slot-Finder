{"version":3,"sources":["components/Header.js","components/SearchSlot.js","components/ListSlots.js","App.js","reportWebVitals.js","index.js"],"names":["Header","SearchSlot","stateName","statesList","districtName","districtList","findSlots","changeState","changeDistrict","appointmentDate","changeDate","onSubmit","className","value","onChange","map","state","state_id","state_name","dist","district_id","district_name","dateFormat","selected","dt","type","ListSlots","slotList","length","filter","slot","available_capacity","name","address","block_name","pincode","vaccine","min_age_limit","fee_type","fee","session_id","App","useState","setStateName","setStatesList","setDistrictName","setDistrictList","Date","setAppointmentDate","appointmentSlotList","setAppointmentSlotList","useEffect","a","getStatesData","getDistrictByStates","initialFetch","fetch","resp","json","statesData","states","stateId","districtApiMetadataUrl","districtsData","districts","getSlotsByDistrict","distId","appointmentSlotApiUrl","slotsDetail","sessions","evnt","preventDefault","dd","getDate","mm","getMonth","yyyy","getFullYear","apptDate","target","districtId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6df2aab7.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n    return (\n        <header>\n            <h2>CoWin Vaccine Slot Finder</h2>\n        </header>\n    )\n}\n\nexport default Header\n","// react Date Picker\nimport DatePicker from 'react-datepicker'\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst SearchSlot = ({\n    stateName,\n    statesList,\n    districtName,\n    districtList,\n    findSlots,\n    changeState,\n    changeDistrict,\n    appointmentDate,\n    changeDate }) => {\n\n    return (\n        <form onSubmit={findSlots}>\n            <div className='container'>\n                <label className='form-label'>Select States</label>\n                <select className='form-select form-filed' value={stateName} onChange={changeState}>\n\n                    {\n                        statesList.map((state) => (\n                            <option key={state.state_id} value={state.state_id}>{state.state_name}</option>\n                        ))\n                    }\n\n                </select>\n            </div>\n            <div className='container'>\n                <label className='form-label'>Select District</label>\n                <select className='form-select form-filed' value={districtName} onChange={changeDistrict}>\n                    {\n                        districtList.map((dist) => (\n                            <option key={dist.district_id} value={dist.district_id}>{dist.district_name}</option>\n                        ))\n                    }\n                </select>\n            </div>\n            <div className='container'>\n                <label className='form-label'>Select Date</label>\n                <DatePicker dateFormat=\"dd/MM/yyyy\" className='form-control form-filed' selected={appointmentDate} onChange={(dt) => changeDate(dt)} />\n            </div>\n            <div className='container'>\n                <input type='submit' className='btn form-control btn-primary form-filed' value='Find Slots' />\n            </div>\n        </form>\n    )\n}\n\nexport default SearchSlot\n","const ListSlots = ({ slotList }) => {\n    return (\n        <div className='container'>\n            {\n                slotList.length > 0 ? slotList.filter((slot) => slot.available_capacity > 0).map((slot) => (\n                    <div key={`${slot.session_id}`} className='container slot'>\n                        <h5>{slot.name}</h5>\n                        <p>Address: {slot.address}, {slot.block_name} - {slot.pincode}</p>\n                        <div>\n                            <span className='vacname'> {slot.vaccine} </span>\n                            <span className='vacavl'> ({slot.available_capacity}) </span><br />\n                        </div>\n                        <div className='rowdisplay'>\n                            <div className='vacage'> Age Limit: {slot.min_age_limit}+ </div>\n                            <div className='vacfee'> {slot.fee_type === 'Free' ? slot.fee_type : slot.fee_type + ' - â‚¹' + slot.fee}</div>\n                        </div>\n                    </div>\n                )) : <h5 className='slot'> No Slots Available </h5>\n            }\n        </div>\n    )\n}\n\nexport default ListSlots\n","// Manage States\nimport { useState, useEffect } from 'react'\n// Import App Specific CSS\nimport './App.css'\n\n// Import Components\nimport Header from './components/Header'\nimport SearchSlot from './components/SearchSlot'\nimport ListSlots from './components/ListSlots'\n\nfunction App() {\n  // Controls for Form Items\n  const [stateName, setStateName] = useState('');\n  const [statesList, setStatesList] = useState([]);\n  const [districtName, setDistrictName] = useState('')\n  const [districtList, setDistrictList] = useState([])\n  const [appointmentDate, setAppointmentDate] = useState(new Date())\n  const [appointmentSlotList, setAppointmentSlotList] = useState([])\n\n  //Get List of all States on Startup\n  useEffect(() => {\n    const initialFetch = async () => {\n      await getStatesData()\n      await getDistrictByStates(1)\n    }\n\n    initialFetch()\n\n  }, [])\n\n  // Function to fetch List of States\n  const getStatesData = async () => {\n    const statesApiMetadataUrl = 'https://cdn-api.co-vin.in/api/v2/admin/location/states'\n    const resp = await fetch(statesApiMetadataUrl)\n\n    const statesData = await resp.json();\n\n    setStatesList(statesData.states)\n\n    setStateName(statesData.states[0].state_id)\n  }\n\n  // Function to fetch List of Districts in State\n  const getDistrictByStates = async (stateId) => {\n    const districtApiMetadataUrl = `https://cdn-api.co-vin.in/api/v2/admin/location/districts/${stateId}`\n    const resp = await fetch(districtApiMetadataUrl)\n\n    const districtsData = await resp.json()\n\n    setDistrictList(districtsData.districts)\n\n    setDistrictName(districtsData.districts[0].district_id)\n  }\n\n  // Function when state is changed\n  const changeState = (evnt) => {\n    const stateId = evnt.target.value\n    if (stateId) {\n\n      setStateName(stateId)\n\n      getDistrictByStates(stateId)\n    }\n  }\n\n  // Function when District is changed\n  const changeDistrict = (evnt) => {\n    const districtId = evnt.target.value\n    if (districtId) {\n      setDistrictName(districtId)\n    }\n  }\n\n  // get Slots by Districst\n  const getSlotsByDistrict = async (distId, dt) => {\n    const appointmentSlotApiUrl = `https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/findByDistrict?district_id=${distId}&date=${dt}`\n\n    const resp = await fetch(appointmentSlotApiUrl)\n\n    const slotsDetail = await resp.json()\n\n    setAppointmentSlotList(slotsDetail.sessions)\n  }\n\n  // Set Appointment date\n  const changeDate = (dt) => {\n    setAppointmentDate(dt)\n  }\n\n  // Find all Slots\n  const findSlots = (evnt) => {\n    evnt.preventDefault()\n\n    const dd = appointmentDate.getDate() < 10 ? '0' + appointmentDate.getDate() : appointmentDate.getDate()\n    const mm = appointmentDate.getMonth() + 1 < 10 ? '0' + (appointmentDate.getMonth() + 1) : appointmentDate.getMonth() + 1\n    const yyyy = appointmentDate.getFullYear()\n\n    const apptDate = `${dd}-${mm}-${yyyy}`\n\n    //console.log(`District Id: ${districtName} for Date: ${apptDate} `)\n    getSlotsByDistrict(districtName, apptDate)\n  }\n\n  return (\n    <div className='container-fluid container-box'>\n      <Header />\n      <SearchSlot\n        stateName={stateName}\n        statesList={statesList}\n        districtName={districtName}\n        districtList={districtList}\n        findSlots={findSlots}\n        changeState={changeState}\n        changeDistrict={changeDistrict}\n        appointmentDate={appointmentDate}\n        changeDate={changeDate} />\n      <ListSlots slotList={appointmentSlotList} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// Add Bootstrap\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}